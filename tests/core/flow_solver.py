from datetime import datetime

import pandas as pd
from pandas.testing import assert_frame_equal

from opennem.core.flow_solver import calculate_flow_for_interval
from opennem.schema.network import NetworkNEM, NetworkSchema


# fixtures for this test adapted from Simons spreadsheet at
# https://docs.google.com/spreadsheets/d/12eAnLYSdXJ55I06m0sRfrJyVd-1gGsSr/edit#gid=1210585319
def load_energy_and_emissions(interval: datetime, network: NetworkSchema = NetworkNEM) -> pd.DataFrame:
    """Load generation and emissions for an interval and the interval prior for each region of the network"""
    df = pd.DataFrame(
        {
            "trading_interval": [interval] * 5,
            "network_id": [network.code] * 5,
            "network_region": ["QLD1", "NSW1", "VIC1", "SA1", "TAS1"],
            "energy": [500, 600, 300, 100, 80],
            "emissions": [325, 330, 180, 15, 4],
        },
    )

    df["emissions_intensity"] = df["emissions"] / df["energy"]

    return df


def load_interconnector_interval(interval: datetime, network: NetworkSchema = NetworkNEM) -> pd.DataFrame:
    """Load interval for each interconnector for a given interval"""

    df = pd.DataFrame(
        {
            "trading_interval": [interval] * 4,
            "network_id": [network.code] * 4,
            "interconnector_region_from": ["VIC1", "NSW1", "TAS1", "VIC1"],
            "interconnector_region_to": ["SA1", "QLD1", "VIC1", "NSW1"],
            "energy": [22, -55, 11, 27.5],
        },
    )

    return df


def flow_solver_test_output() -> pd.DataFrame:
    """This is the test output to compare against"""
    df = pd.DataFrame(
        {
            "network_region": ["TAS1", "VIC1", "SA1", "QLD1", "NSW1"],
            "energy_exported": [11, 49.5, 0, 55, 0],
            "emissions_exported": [0.55, 28.7, 0, 35.75, 0],
            "energy_imported": [0, 11, 22, 0, 82.5],
            "emissions_imported": [0, 0.6, 12.8, 0, 51.7],
        },
    )

    return df


def test_calculate_flow_for_interval() -> None:
    """
    Unit test for the calculate_flow_for_interval function.

    This test checks that the function correctly calculates the flow of energy and emissions
    between network regions for a given interval. It compares the function's output against
    the expected output generated by the flow_solver_test_output function.

    The function does not accept any arguments and does not return any value. It will raise an
    AssertionError if the function's output does not match the expected output.
    """
    interval = datetime.fromisoformat("2023-04-09T10:15:00+10:00")

    df_energy_and_emissions = load_energy_and_emissions(interval)
    df_interconnector = load_interconnector_interval(interval)

    expected_output = flow_solver_test_output()

    # Call the function with the test data
    actual_output = calculate_flow_for_interval(df_energy_and_emissions, df_interconnector)

    # Sort both dataframes by 'network_region' to ensure the same order
    expected_output.sort_values(by="network_region", inplace=True)
    actual_output.sort_values(by="network_region", inplace=True)

    # Reset index for both dataframes to ensure equal comparison
    expected_output.reset_index(drop=True, inplace=True)
    actual_output.reset_index(drop=True, inplace=True)

    # Check if the actual output matches the expected output between dataframes (deep compare)
    assert_frame_equal(actual_output, expected_output)

x-app: &default-app
  restart: unless-stopped
  depends_on:
    - redis
  networks:
    - frontend
  volumes:
    - /var/run/postgresql/:/var/run/postgresql/
  environment:
    - TIMEZONE
    - ENV
    - LOG_LEVEL
    - DATABASE_HOST_URL
    - REDIS_HOST_URL
    - SENTRY_URL
    - S3_DATA_BUCKET_PATH
    - APVI_TOKEN
    - HTTPS_PROXY_URL
    - CLOUDFLARE_ACCOUNT_ID
    - CLOUDFLARE_API_KEY
    - FLOWS_AND_EMISSIONS_V3
    - REDIRECT_API_STATIC
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - SHOW_EMISSIONS_IN_POWER_OUTPUTS
    - SHOW_EMISSION_FACTORS_IN_POWER_OUTPUTS
    - COMPACT_NUMBER_OUPUT_IN_JSON
    - SLACK_HOOK_NEW_FACILITIES
    - SLACK_HOOK_MONITORING
    - SLACK_HOOK_FEEDBACK
    # feature flags
    - FLOWS_AND_EMISSIONS_V3
    - REDIRECT_API_STATIC
    - SHOW_EMISSIONS_IN_POWER_OUTPUTS
    - SHOW_EMISSION_FACTORS_IN_POWER_OUTPUTS
    - COMPACT_NUMBER_OUPUT_IN_JSON

services:
  traefik:
    image: traefik
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend
    command:
      - --api.insecure=true
      - --providers.docker
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      - --certificatesResolvers.myresolver.acme.email=nik@infotorch.org
      - --certificatesResolvers.myresolver.acme.storage=/data/acme.json
      - --certificatesresolvers.myresolver.acme.dnschallenge=true
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=route53
    restart: unless-stopped
    hostname: gw
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_HOSTED_ZONE_ID
      - AWS_REGION
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik_acme:/data
    labels:
      # redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.redirs.entrypoints=web"
      - "traefik.http.routers.redirs.middlewares=redirect-to-https"
      # middlewares
      - "traefik.http.middlewares.compress.compress=true"
      - "traefik.http.middlewares.security-headers.headers.framedeny=true"
      - "traefik.http.middlewares.security-headers.headers.sslredirect=true"
      # gw host
      - "traefik.enable=true"
      - "traefik.http.routers.gw.entrypoints=websecure"
      - "traefik.http.routers.gw.rule=Host(`gw.dev.opennem.org.au`)"
      - "traefik.http.routers.gw.tls=true"
      - "traefik.http.routers.gw.tls.certresolver=myresolver"
      # - "traefik.http.routers.gw.service=traefik"
      - "traefik.http.services.gw.loadbalancer.server.port=8080"
      - "traefik.http.services.gw.loadbalancer.server.scheme=http"
      - "traefik.docker.network=frontend"

  api:
    <<: *default-app
    image: ghcr.io/opennem/opennem:$VERSION
    command:
      [
        "uvicorn",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
        "--workers",
        "4",
        "opennem.api.app:app"
      ]
    healthcheck:
      test: curl --fail http://127.0.0.1:8000/networks || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-secure.entrypoints=websecure"
      - "traefik.http.routers.api-secure.rule=Host(`api.dev.opennem.org.au`)"
      - "traefik.http.routers.api-secure.tls=true"
      - "traefik.http.routers.api-secure.tls.certresolver=myresolver"
      - "traefik.http.routers.api-secure.service=api"
      # compress
      - "traefik.http.routers.api-secure.middlewares=compress@docker,security-headers@docker"
      # security headers
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      - "traefik.http.services.api.loadbalancer.server.scheme=http"
      - "traefik.docker.network=frontend"
      # autohead
      - "autoheal=true"

  worker:
    <<: *default-app
    image: ghcr.io/opennem/opennem:$VERSION
    restart: unless-stopped
    command:
      [
        "huey_consumer",
        "-w4",
        "-f",
        "-k",
        "process",
        "opennem.workers.scheduler.huey"
      ]
    labels:
      - "traefik.enable=false"
      - "com.centurylinklabs.watchtower.enable=true"

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - frontend
    environment:
      - TZ
    labels:
      - "traefik.enable=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  # watchtower:
  #   image: containrrr/watchtower
  #   restart: unless-stopped
  #   networks:
  #     - frontend
  #   environment:
  #     - TZ
  #     - WATCHTOWER_CLEANUP=1
  #     - WATCHTOWER_LABEL_ENABLE=1
  #     - WATCHTOWER_POLL_INTERVAL=30
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /root/.docker/config.json:/config.json
  #   labels:
  #     - traefik.enable=false

  # autoheal:
  #   image: willfarrell/autoheal:latest
  #   tty: true
  #   restart: always
  #   environment:
  #     - AUTOHEAL_INTERVAL=60
  #     - AUTOHEAL_START_PERIOD=300
  #     - AUTOHEAL_DEFAULT_STOP_TIMEOUT=10
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   labels:
  #     - traefik.enable=false

networks:
  frontend:


volumes:
  traefik_acme:
    driver: local
